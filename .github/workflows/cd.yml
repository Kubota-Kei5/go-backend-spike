name: CD

on:
  push:
  #   branches: [main]
  workflow_dispatch: # 手動実行も可能
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

concurrency:
  group: cloud-run-deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Verify gcloud configuration
        run: |
          echo "Project ID: ${{ secrets.GCP_PROJECT_ID }}"
          gcloud config list
          gcloud auth list

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Set environment variables
        run: |
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME || 'spike-backend-gin' }}" >> $GITHUB_ENV
          echo "SERVICE_NAME=${{ secrets.SERVICE_NAME || 'spike-app' }}" >> $GITHUB_ENV
          echo "REGION=${{ secrets.REGION || 'asia-northeast1' }}" >> $GITHUB_ENV
          echo "CLOUD_SQL_INSTANCE=spike-app" >> $GITHUB_ENV
          echo "IMAGE_TAG=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.SERVICE_NAME || 'spike-app' }}:${{ github.sha }}" >> $GITHUB_ENV

      # - name: Check if Cloud SQL instance exists
      #   id: check-instance
      #   run: |
      #     if gcloud sql instances describe ${{ env.CLOUD_SQL_INSTANCE }} --quiet 2>/dev/null; then
      #       echo "instance-exists=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "instance-exists=false" >> $GITHUB_OUTPUT
      #     fi

      # - name: Create Cloud SQL instance (if not exists)
      #   if: steps.check-instance.outputs.instance-exists == 'false'
      #   run: |
      #     gcloud sql instances create ${{ env.CLOUD_SQL_INSTANCE }} \
      #       --database-version=POSTGRES_16 \
      #       --tier=db-f1-micro \
      #       --region=${{ env.REGION }} \
      #       --authorized-networks=0.0.0.0/0 \
      #       --backup-start-time=03:00 \
      #       --enable-bin-log \
      #       --maintenance-window-day=SUN \
      #       --maintenance-window-hour=04

      # - name: Wait for Cloud SQL instance to be ready
      #   run: |
      #     echo "Waiting for Cloud SQL instance to be ready..."
      #     timeout 300s bash -c 'until gcloud sql instances describe ${{ env.CLOUD_SQL_INSTANCE }} --format="value(state)" | grep -q "RUNNABLE"; do sleep 10; done'

      # - name: Set Cloud SQL root password
      #   run: |
      #     gcloud sql users set-password root \
      #       --host=% \
      #       --instance=${{ env.CLOUD_SQL_INSTANCE }} \
      #       --password=${{ secrets.PROD_DB_PASSWORD }}

      # - name: Create database user (if not exists)
      #   run: |
      #     if ! gcloud sql users list --instance=${{ env.CLOUD_SQL_INSTANCE }} --format="value(name)" | grep -q "^${{ secrets.PROD_DB_USER }}$"; then
      #       gcloud sql users create ${{ secrets.PROD_DB_USER }} \
      #         --instance=${{ env.CLOUD_SQL_INSTANCE }} \
      #         --password=${{ secrets.PROD_DB_PASSWORD }}
      #     fi

      # - name: Create database (if not exists)
      #   run: |
      #     if ! gcloud sql databases list --instance=${{ env.CLOUD_SQL_INSTANCE }} --format="value(name)" | grep -q "^${{ secrets.PROD_DB_NAME }}$"; then
      #       gcloud sql databases create ${{ secrets.PROD_DB_NAME }} \
      #         --instance=${{ env.CLOUD_SQL_INSTANCE }}
      #     fi

      - name: Build and push Docker image
        run: |
          echo "Building image: ${{ env.IMAGE_TAG }}"
          docker build --target prod -t ${{ env.IMAGE_TAG }} .
          docker push ${{ env.IMAGE_TAG }}

      - name: Deploy to Cloud Run
        run: |
          timeout 300s gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_TAG }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --add-cloudsql-instances ${{ secrets.INSTANCE_CONNECTION_NAME }} \
            --set-env-vars="ENV=production,POSTGRES_USER=${{ secrets.PROD_DB_USER }},POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }},POSTGRES_DB=${{ secrets.PROD_DB_NAME }},CLOUD_SQL_CONNECTION_NAME=${{ secrets.INSTANCE_CONNECTION_NAME }},DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            --quiet

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $SERVICE_URL"

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.get-url.outputs.service_url }}" >> $GITHUB_STEP_SUMMARY
