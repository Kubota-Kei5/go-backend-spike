name: CD

on:
  push:
    branches: [main]
  workflow_dispatch: # 手動実行も可能
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # CIワークフローが成功した場合のみデプロイを実行
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Verify gcloud configuration
        run: |
          echo "Project ID: ${{ secrets.GCP_PROJECT_ID }}"
          gcloud config list
          gcloud auth list

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Set environment variables
        run: |
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME || 'spike-backend-gin' }}" >> $GITHUB_ENV
          echo "SERVICE_NAME=${{ secrets.SERVICE_NAME || 'spike-app' }}" >> $GITHUB_ENV
          echo "REGION=${{ secrets.REGION || 'asia-northeast1' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.SERVICE_NAME || 'spike-app' }}:${{ github.sha }}" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          echo "Building image: ${{ env.IMAGE_TAG }}"
          timeout 600s gcloud builds submit --tag ${{ env.IMAGE_TAG }} --project ${{ secrets.GCP_PROJECT_ID }} --service-account=github-actions-cd@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com

      - name: Create secure environment variables file
        run: |
          cat << 'EOF' > .env.deploy
          ENV=production
          POSTGRES_USER=${{ secrets.PROD_DB_USER }}
          POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
          CLOUD_SQL_CONNECTION_NAME=${{ secrets.INSTANCE_CONNECTION_NAME }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          EOF
          chmod 600 .env.deploy

      - name: Deploy to Cloud Run
        run: |
          timeout 300s gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_TAG }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --add-cloudsql-instances ${{ secrets.INSTANCE_CONNECTION_NAME }} \
            --env-vars-file .env.deploy \
            --quiet

      - name: Cleanup environment file
        if: always()
        run: rm -f .env.deploy

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $SERVICE_URL"

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.get-url.outputs.service_url }}" >> $GITHUB_STEP_SUMMARY
